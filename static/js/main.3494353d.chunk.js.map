{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.scss","UI/Input/Input.module.css","redux/selectors.js","UI/Layout/Layout.style.js","UI/Layout/Layout.jsx","UI/SectionWrap/SectionWrap.style.js","UI/SectionWrap/SectionWrap.jsx","UI/Button/Button.style.js","UI/Button/Button.jsx","UI/Input/Input.jsx","redux/actions.js","API/API.js","redux/operations.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Home/Home.js","components/App/App.jsx","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","getAllContacts","state","contacts","items","getFilter","filter","get_isPhonebook","length","get_isLoading","loading","getError","error","getVisibleContacts","createSelector","name","toLowerCase","includes","Container","styled","div","Layout","children","Section","Title","h3","SectionWrap","title","Btn","button","Button","onClick","defaultProps","Input","props","className","css","input","type","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","clearError","getContacts","a","axios","get","data","addContact","contact","post","console","log","deleteContact","id","delete","defaults","baseURL","dispatch","API","ContactForm","useState","phone","setContact","useSelector","contactsSelectors","useDispatch","pattern","validateForm","toast","some","onCheckUnique","resetForm","position","reverseOrder","onSubmit","evt","preventDefault","newContact","Date","now","contactsOperations","value","onChange","target","placeholder","required","ContactListItem","onRemove","item","span","ContactList","VisibleContacts","isLoading","map","key","Filter","label","labelText","Home","isPhonebook","App","initialState","createReducer","_","payload","onError","combineReducers","store","configureStore","reducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","concat","logger","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,SAAW,8BAA8B,KAAO,4B,mBCAlED,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,UAAY,0BAA0B,MAAQ,wB,mBCA9FD,EAAOC,QAAU,CAAC,MAAQ,uB,4JCCpBC,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OACzCC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,SAASG,QAY3B,GACXC,gBAHoB,SAAAL,GAAK,OAAIA,EAAMC,SAASC,MAAMI,OAAS,GAI3DC,cAbkB,SAAAP,GAAK,OAAIA,EAAMC,SAASO,SAc1CT,iBACAI,YACAM,SAfa,SAAAT,GAAK,OAAIA,EAAMC,SAASS,OAgBrCC,mBAduBC,YACvB,CAACb,EAAgBI,IACjB,SAACF,EAAUG,GAAX,OACIH,EAASG,QAAO,qBAAGS,KAAgBC,cAAcC,SAASX,U,cCRrDY,EAAYC,IAAOC,IAAV,wTCGPC,EAFA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,kBAACJ,EAAD,KAAYI,ICDhCC,EAAUJ,IAAOC,IAAV,sVAYPI,EAAQL,IAAOM,GAAV,sDCEHC,EAZK,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOL,EAAV,EAAUA,SAAV,OAChB,kBAACC,EAAD,KACKI,GAAS,kBAACH,EAAD,KAAQG,GACjBL,I,gBCLIM,EAAMT,IAAOU,OAAV,8iCCEVC,EAAS,SAAC,GAAD,IAAGR,EAAH,EAAGA,SAAUS,EAAb,EAAaA,QAAb,OACX,kBAACH,EAAD,CAAKG,QAASA,GAAUT,IAG5BQ,EAAOE,aAAe,CAClBV,SAAU,IAOCQ,Q,iBCTAG,EAJD,SAAAC,GACV,OAAO,yCAAOC,UAAWC,IAAIC,OAAWH,EAAjC,CAAwCI,KAAK,W,sCCF3CC,EAAuBC,YAChC,iCAESC,EAAuBD,YAChC,iCAESE,EAAqBF,YAAa,+BAElCG,EAAoBH,YAAa,8BACjCI,EAAoBJ,YAAa,8BACjCK,EAAkBL,YAAa,4BAE/BM,EAAuBN,YAChC,iCAESO,EAAuBP,YAChC,iCAESQ,EAAqBR,YAAa,+BAElCS,EAAeT,YAAa,yBAC5BU,EAAaV,YAAa,uB,iBClBhC,SAAeW,IAAtB,+B,4CAAO,8BAAAC,EAAA,sEACoBC,IAAMC,IAAI,aAD9B,uBACKC,EADL,EACKA,KADL,kBAEIA,GAFJ,4C,sBAKA,SAAeC,EAAtB,kC,4CAAO,WAA0BC,GAA1B,iBAAAL,EAAA,sEACoBC,IAAMK,KAAK,YAAaD,GAD5C,uBACKF,EADL,EACKA,KAERI,QAAQC,IAAIH,GAHT,kBAIIF,GAJJ,4C,sBAOA,SAAeM,EAAtB,mC,8CAAO,WAA6BC,GAA7B,SAAAV,EAAA,sEACGC,IAAMU,OAAN,oBAA0BD,IAD7B,gCAEIA,GAFJ,4C,sBAdPT,IAAMW,SAASC,QAAU,wBAkBzBN,QAAQC,IAAIT,KCJZ,IAkCe,GAxBI,SAAAM,GAAO,8CAAI,WAAMS,GAAN,iBAAAd,EAAA,6DAC1BO,QAAQC,IAAIH,GAEZS,EAASvB,KAHiB,kBAKCwB,EAAeV,GALhB,gBAKdF,EALc,EAKdA,KACRW,EAAStB,EAAkBW,IANL,kDAQtBW,EAASrB,EAAgB,EAAD,KARF,0DAAJ,uDAwBX,GAZO,SAAAiB,GAAE,8CAAI,WAAMI,GAAN,SAAAd,EAAA,6DACxBc,EAASpB,KADe,kBAGdqB,EAAkBL,GAHJ,OAIpBI,EAASnB,EAAqBe,IAJV,gDAMpBI,EAASlB,EAAmB,EAAD,KANP,yDAAJ,uDC9BjB,SAASoB,KACZ,MAA8BC,mBAAS,CAAEtD,KAAM,GAAIuD,MAAO,KAA1D,mBAAOb,EAAP,KAAgBc,EAAhB,KAEMpE,EAAWqE,YAAYC,EAAkBxE,gBACzCiE,EAAWQ,cAEXC,EACI,yHADJA,EAEK,2FAELhD,EACI,2TADJA,EAEK,0aAaX,SAASiD,IACL,OAAInB,EAAQ1C,MAAQ0C,EAAQa,OACxBO,IAAMjE,MAAM,wBACL,GAbO,SAAAG,GAElB,GADA4C,QAAQC,IAAI7C,GAERZ,EAAS2E,MACL,SAAArB,GAAO,OAAIA,EAAQ1C,KAAKC,gBAAkBD,EAAKC,iBAGnD,OAAO6D,IAAMjE,MAAN,WAAgBG,EAAhB,8BAQJgE,CAActB,EAAQ1C,MAEjC,IAaMiE,EAAY,WACdT,EAAW,CAAExD,KAAM,GAAIuD,MAAO,MAElC,OACI,oCACI,kBAAC,IAAD,CAASW,SAAS,aAAaC,cAAc,IAC7C,0BAAMC,SAnBO,SAAAC,GACjBA,EAAIC,iBACJ,IAAMC,EAAU,2BACT7B,GADS,IAEZK,GAAIyB,KAAKC,QAEUZ,MAEvBV,EAASuB,GAA8BH,IACvCN,IACArB,QAAQC,IAAI,SAAU0B,MAUd,kBAAC,EAAD,CACII,MAAOjC,EAAQ1C,KACfA,KAAK,OACLuB,KAAK,OACLqD,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OACNrB,EAAW,2BAAKd,GAAN,IAAe1C,KAAM6E,EAAOF,UAE1CG,YAAY,aACZlB,QAASA,EACThD,MAAOA,EACPmE,UAAQ,IAGZ,kBAAC,EAAD,CACIJ,MAAOjC,EAAQa,MACfvD,KAAK,QACLuB,KAAK,MACLqD,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OACNrB,EAAW,2BAAKd,GAAN,IAAea,MAAOsB,EAAOF,UAE3CG,YAAY,qBACZlB,QAASA,EACThD,MAAOA,EACPmE,UAAQ,IAGZ,kBAAC,EAAD,CAAQxD,KAAK,UAAb,iB,wBC9EVyD,GAAkB,SAAC,GAA+B,IAA7BhF,EAA4B,EAA5BA,KAAMuD,EAAsB,EAAtBA,MAAO0B,EAAe,EAAfA,SACpC,OACI,wBAAI7D,UAAWC,KAAI6D,MACf,0BAAM9D,UAAWC,KAAI8D,MAChBnF,EADL,IACYuD,GAEZ,kBAAC,EAAD,CAAQnC,UAAU,MAAMJ,QAASiE,GAAjC,YAOCG,GAAc,WACvB,IAAMC,EAAkB5B,YAAYC,EAAkB5D,oBAChDwF,EAAY7B,YAAYC,EAAkBhE,eAC1CyD,EAAWQ,cAOjB,OACI,wBAAIvC,UAAWC,KAAIjC,UAAnB,OACKiG,QADL,IACKA,OADL,EACKA,EAAiBE,KAAI,gBAAGxC,EAAH,EAAGA,GAAI/C,EAAP,EAAOA,KAAMuD,EAAb,EAAaA,MAAb,OAClB,kBAAC,GAAD,CACIiC,IAAKzC,EACL/C,KAAMA,EACNuD,MAAOA,EACP0B,SAAU,kBAZT,SAAAlC,GACTuC,GAEJnC,EAASuB,GAAiC3B,IASdkC,CAASlC,W,oBCjChC0C,GAAS,WAClB,IAAMlG,EAASkE,YAAYC,EAAkBpE,WACvC6D,EAAWQ,cACjB,OACI,2BAAOvC,UAAWC,KAAIqE,OAClB,0BAAMtE,UAAWC,KAAIsE,WAArB,yBACA,2BACIpE,KAAK,OACLvB,KAAK,SACL2E,MAAOpF,EACPqF,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgB1B,EAASjB,EAAa2C,EAAOF,SACvDG,YAAY,wBACZlB,QAAQ,yHACRhD,MAAM,kcACNmE,UAAQ,EACR3D,UAAWC,KAAIC,UCVlBsE,GAAO,WAChB,IAAMC,EAAcpC,YAAYC,EAAkBlE,iBAElD,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAaoB,MAAM,aACf,kBAACyC,GAAD,OAGJ,kBAAC,EAAD,CAAazC,MAAM,gBACbiF,EAME,iDALA,oCACI,kBAAC,GAAD,MACA,kBAAC,GAAD,UCZTC,I,SAAAA,GARf,WACI,OACI,oCACI,kBAAC,GAAD,Q,kCCSNC,GACQ,GADRA,IAGO,EAHPA,GAIK,KAGL1G,GAAQ2G,YAAcD,IAAD,sBACtBrE,GAAuB,SAACuE,EAAD,YAAMC,WADP,gBAEtBrE,GAAoB,SAAC1C,EAAD,OAAU+G,EAAV,EAAUA,QAAV,6BAA4B/G,GAA5B,CAAmC+G,OAFjC,gBAGtBlE,GAAuB,SAAC7C,EAAD,OAAU+G,EAAV,EAAUA,QAAV,OACpB/G,EAAMI,QAAO,qBAAGwD,KAAgBmD,QAJb,KAOrB3G,GAASyG,YAAc,GAAD,gBACvB9D,GAAe,SAAC+D,EAAD,YAAMC,YAGpBC,GAAU,SAACF,EAAD,YAAMC,SAEhBvG,GAAUqG,YAAcD,IAAD,sBACxBvE,GAAuB,kBAAM,KADL,gBAExBE,GAAuB,kBAAM,KAFL,gBAGxBC,GAAqB,kBAAM,KAHH,gBAKxBC,GAAoB,kBAAM,KALF,gBAMxBC,GAAoB,kBAAM,KANF,gBAOxBC,GAAkB,kBAAM,KAPA,gBASxBC,GAAuB,kBAAM,KATL,gBAUxBC,GAAuB,kBAAM,KAVL,gBAWxBC,GAAqB,kBAAM,KAXH,KAcvBpC,GAAQmG,YAAcD,IAAD,sBACtBpE,EAAqBwE,IADC,gBAEtBrE,EAAkBqE,IAFI,gBAGtBlE,EAAqBkE,IAHC,gBAItBhE,GAAa,kBAAM,QAJG,KAOZiE,gBAAgB,CAC3B/G,SACAE,UACAI,WACAE,WC/CWwG,GAVDC,YAAe,CACzBC,QAAS,CACLnH,SAAUoH,IAEdC,WAAY,SAAAC,GAAoB,OAC5BA,EAAqB,CAAEC,mBAAmB,IAASC,OAAOC,YAE9DC,UAAUC,I,MCJdC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUb,MAAOA,IACb,kBAAC,GAAD,QAGRc,SAASC,eAAe,W","file":"static/js/main.3494353d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__2qc7U\",\"span\":\"ContactList_span__1wG75\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__oqWFJ\",\"labelText\":\"Filter_labelText__1Yl1U\",\"input\":\"Filter_input__2fKZm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1krCR\"};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\nconst getFilter = state => state.contacts.filter;\r\nconst get_isLoading = state => state.contacts.loading;\r\nconst getError = state => state.contacts.error;\r\n\r\nconst getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) =>\r\n        contacts.filter(({ name }) => name.toLowerCase().includes(filter)),\r\n);\r\n\r\nconst get_isPhonebook = state => state.contacts.items.length > 0;\r\n\r\nexport default {\r\n    get_isPhonebook,\r\n    get_isLoading,\r\n    getAllContacts,\r\n    getFilter,\r\n    getError,\r\n    getVisibleContacts,\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  width: 1280px;\r\n  margin: 0 auto;\r\n  padding: 0 20px;\r\n\r\n  @media (max-width: 1283px) {\r\n    width: 940px;\r\n  }\r\n\r\n  @media (max-width: 992px) {\r\n    width: 700px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 520px;\r\n  }\r\n\r\n  @media (max-width: 576px) {\r\n    width: 90%;\r\n  }\r\n`;\r\n","import { Container } from './Layout.style';\r\nimport React from 'react';\r\n\r\nconst Layout = ({ children }) => <Container>{children}</Container>;\r\n\r\nexport default Layout;\r\n","import styled from 'styled-components';\r\n\r\nexport const Section = styled.div`\r\n    padding-top: 35px;\r\n    padding-bottom: 35px;\r\n    background-color: #fff;\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n    border-radius: 7px;\r\n    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\r\n    border: 1px solid rgba(128, 128, 128, 0.4);\r\n    margin-bottom: 30px;\r\n`;\r\n\r\nexport const Title = styled.h3`\r\n    margin-bottom: 15px;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Section, Title } from './SectionWrap.style';\r\n\r\nconst SectionWrap = ({ title, children }) => (\r\n    <Section>\r\n        {title && <Title>{title}</Title>}\r\n        {children}\r\n    </Section>\r\n);\r\n\r\nSectionWrap.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default SectionWrap;\r\n","import styled from 'styled-components';\r\n\r\nexport const Btn = styled.button`\r\n    cursor: pointer;\r\n    color: #7366ff;\r\n    font-weight: 500;\r\n    padding: 10px 15px;\r\n    border-radius: 5px;\r\n    background-color: rgba(115, 102, 255, 0.15);\r\n    transition: all 0.3s ease;\r\n\r\n    display: inline-block;\r\n    margin: 0 10px;\r\n    padding: 10px;\r\n    min-width: 120px;\r\n    background-color: #30d5c8;\r\n    color: #ffffff;\r\n    font-weight: 700;\r\n    font-size: 14px;\r\n    letter-spacing: 0.02em;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    border-radius: 4px;\r\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\r\n    border: none;\r\n    cursor: pointer;\r\n    transition-property: color, background-color, box-shadow;\r\n    transition-duration: 250ms;\r\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n    &:hover,\r\n    &:focus {\r\n        color: #fff;\r\n        background-color: #7366ff;\r\n\r\n        color: #30d5c8;\r\n        background-color: #ffffff;\r\n        box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1),\r\n            0px 1px 2px rgba(0, 0, 0, 0.08), 0px 2px 2px rgba(0, 0, 0, 0.12);\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Btn } from './Button.style';\r\n\r\nconst Button = ({ children, onClick }) => (\r\n    <Btn onClick={onClick}>{children}</Btn>\r\n);\r\n\r\nButton.defaultProps = {\r\n    children: '',\r\n};\r\n\r\nButton.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport css from './Input.module.css';\n\nconst Input = props => {\n    return <input className={css.input} {...props} type=\"text\" />;\n};\n\nexport default Input;\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n    'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n    'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n    'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n    'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\nexport const clearError = createAction('contacts/clearError');\r\n","import axios from 'axios';\r\n\r\n// axios.defaults.baseURL = 'http://localhost:7777';\r\naxios.defaults.baseURL = 'http://localhost:7777';\r\n\r\nexport async function getContacts() {\r\n    const { data } = await axios.get('/contacts');\r\n    return data;\r\n}\r\n\r\nexport async function addContact(contact) {\r\n    const { data } = await axios.post('/contacts', contact);\r\n\r\n    console.log(contact);\r\n    return data;\r\n}\r\n\r\nexport async function deleteContact(id) {\r\n    await axios.delete(`/contacts/${id}`);\r\n    return id;\r\n}\r\nconsole.log(getContacts());\r\n","import {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    // changeFilter,\r\n    // clearError,\r\n} from './actions';\r\n\r\nimport * as API from '../API/API';\r\n// import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n    try {\r\n        const { data } = await API.getContacts();\r\n        dispatch(fetchContactsSuccess(data));\r\n    } catch (error) {\r\n        dispatch(fetchContactsError(error.message));\r\n    }\r\n};\r\n\r\nconst addContact = contact => async dispatch => {\r\n    console.log(contact);\r\n\r\n    dispatch(addContactRequest());\r\n    try {\r\n        const { data } = await API.addContact(contact);\r\n        dispatch(addContactSuccess(data));\r\n    } catch (error) {\r\n        dispatch(addContactError(error));\r\n    }\r\n};\r\n\r\nconst deleteContact = id => async dispatch => {\r\n    dispatch(deleteContactRequest());\r\n    try {\r\n        await API.deleteContact(id);\r\n        dispatch(deleteContactSuccess(id));\r\n    } catch (error) {\r\n        dispatch(deleteContactError(error));\r\n    }\r\n};\r\n\r\n// const changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default {\r\n    fetchContacts,\r\n    addContact,\r\n    deleteContact,\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Button, Input } from 'UI';\r\nimport toast from 'react-hot-toast';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactsOperations from 'redux/operations';\r\nimport contactsSelectors from 'redux/selectors';\r\nimport { Toaster } from 'react-hot-toast';\r\n\r\nexport function ContactForm() {\r\n    const [contact, setContact] = useState({ name: '', phone: '' });\r\n\r\n    const contacts = useSelector(contactsSelectors.getAllContacts);\r\n    const dispatch = useDispatch();\r\n\r\n    const pattern = {\r\n        name: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\r\n        phone: '^\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}$',\r\n    };\r\n    const title = {\r\n        name: 'Имя может состоять только из букв, апострофа, тире и пробелов.',\r\n        phone: 'Номер телефона может содержать пробелы, тире, круглые скобки и может начинаться с +',\r\n    };\r\n\r\n    const onCheckUnique = name => {\r\n        console.log(name);\r\n        if (\r\n            contacts.some(\r\n                contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n            )\r\n        ) {\r\n            return toast.error(`\"${name}\" is already in contacts!`);\r\n        }\r\n    };\r\n    function validateForm() {\r\n        if (contact.name || contact.phone) {\r\n            toast.error('Some field is empty');\r\n            return false;\r\n        }\r\n        return onCheckUnique(contact.name);\r\n    }\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        const newContact = {\r\n            ...contact,\r\n            id: Date.now(),\r\n        };\r\n        const isValidateForm = validateForm();\r\n        if (!isValidateForm) return;\r\n        dispatch(contactsOperations.addContact(newContact));\r\n        resetForm();\r\n        console.log('Submit', newContact);\r\n    };\r\n\r\n    const resetForm = () => {\r\n        setContact({ name: '', phone: '' });\r\n    };\r\n    return (\r\n        <>\r\n            <Toaster position=\"top-center\" reverseOrder={false} />\r\n            <form onSubmit={handleSubmit}>\r\n                <Input\r\n                    value={contact.name}\r\n                    name=\"name\"\r\n                    type=\"text\"\r\n                    onChange={({ target }) =>\r\n                        setContact({ ...contact, name: target.value })\r\n                    }\r\n                    placeholder=\"Enter name\"\r\n                    pattern={pattern.name}\r\n                    title={title.name}\r\n                    required\r\n                />\r\n\r\n                <Input\r\n                    value={contact.phone}\r\n                    name=\"phone\"\r\n                    type=\"tel\"\r\n                    onChange={({ target }) =>\r\n                        setContact({ ...contact, phone: target.value })\r\n                    }\r\n                    placeholder=\"Enter phone number\"\r\n                    pattern={pattern.phone}\r\n                    title={title.phone}\r\n                    required\r\n                />\r\n\r\n                <Button type=\"submit\">Add Contact</Button>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport contactsOperations from 'redux/operations';\r\nimport contactsSelectors from 'redux/selectors';\r\nimport { Button } from 'UI/Button';\r\n\r\nimport css from './ContactList.module.css';\r\n\r\nconst ContactListItem = ({ name, phone, onRemove }) => {\r\n    return (\r\n        <li className={css.item}>\r\n            <span className={css.span}>\r\n                {name}:{phone}\r\n            </span>\r\n            <Button className=\"btn\" onClick={onRemove}>\r\n                Delete\r\n            </Button>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport const ContactList = () => {\r\n    const VisibleContacts = useSelector(contactsSelectors.getVisibleContacts);\r\n    const isLoading = useSelector(contactsSelectors.get_isLoading);\r\n    const dispatch = useDispatch();\r\n\r\n    const onRemove = id => {\r\n        if (isLoading) return;\r\n\r\n        dispatch(contactsOperations.deleteContact(id));\r\n    };\r\n    return (\r\n        <ul className={css.contacts}>\r\n            {VisibleContacts?.map(({ id, name, phone }) => (\r\n                <ContactListItem\r\n                    key={id}\r\n                    name={name}\r\n                    phone={phone}\r\n                    onRemove={() => onRemove(id)}\r\n                />\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeFilter } from 'redux/actions';\r\nimport contactsSelectors from 'redux/selectors';\r\nimport css from './Filter.module.scss';\r\n\r\nexport const Filter = () => {\r\n    const filter = useSelector(contactsSelectors.getFilter);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <label className={css.label}>\r\n            <span className={css.labelText}>Find contacts by name</span>\r\n            <input\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                value={filter}\r\n                onChange={({ target }) => dispatch(changeFilter(target.value))}\r\n                placeholder=\"Enter name for Search\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                className={css.input}\r\n            />\r\n        </label>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport contactsSelectors from 'redux/selectors';\r\n\r\nimport { Layout } from 'UI/Layout';\r\nimport { SectionWrap } from 'UI/SectionWrap';\r\nimport { ContactForm } from 'components/ContactForm';\r\nimport { ContactList } from 'components/ContactList';\r\nimport { Filter } from 'components/Filter';\r\n\r\nexport const Home = () => {\r\n    const isPhonebook = useSelector(contactsSelectors.get_isPhonebook);\r\n\r\n    return (\r\n        <Layout>\r\n            <SectionWrap title=\"Phonebook\">\r\n                <ContactForm />\r\n            </SectionWrap>\r\n\r\n            <SectionWrap title=\"Contact List\">\r\n                {!isPhonebook ? (\r\n                    <>\r\n                        <Filter />\r\n                        <ContactList />\r\n                    </>\r\n                ) : (\r\n                    <p>Phonebook is empty</p>\r\n                )}\r\n            </SectionWrap>\r\n        </Layout>\r\n    );\r\n};\r\n","import React from 'react';\n\nimport { Home } from 'pages/Home/Home';\n\nfunction App() {\n    return (\n        <>\n            <Home />\n        </>\n    );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    changeFilter,\r\n    clearError,\r\n} from './actions';\r\n\r\nconst initialState = {\r\n    contacts: [],\r\n    filter: '',\r\n    loading: false,\r\n    error: null,\r\n};\r\n\r\nconst items = createReducer(initialState.contacts, {\r\n    [fetchContactsSuccess]: (_, { payload }) => payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) =>\r\n        state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst onError = (_, { payload }) => payload;\r\n\r\nconst loading = createReducer(initialState.loading, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n});\r\n\r\nconst error = createReducer(initialState.error, {\r\n    [fetchContactsError]: onError,\r\n    [addContactError]: onError,\r\n    [deleteContactError]: onError,\r\n    [clearError]: () => null,\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n    error,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { logger } from 'redux-logger';\r\nimport contactsReducer from './reducer';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer,\r\n    },\r\n    middleware: getDefaultMiddleware =>\r\n        getDefaultMiddleware({ serializableCheck: false }).concat(logger),\r\n\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from 'components';\nimport store from './redux/store';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}